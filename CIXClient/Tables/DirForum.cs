// *****************************************************
// CIXReader
// DirForum.cs
// 
// Author: Steve Palmer (spalmer@cix)
// 
// Created: 01/09/2013 11:30 AM
// 
// Copyright (C) 2013-2015 CIX Online Ltd. All Rights Reserved.
// *****************************************************

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Serialization;
using CIXClient.Collections;
using CIXClient.Database;
using CIXClient.Models;
using CIXClient.Properties;

namespace CIXClient.Tables
{
    /// <summary>
    /// The DirForum table stores a single Forum from the
    /// directory.
    /// </summary>
    public sealed class DirForum
    {
        /// <summary>
        /// The autogenerated ID of this Forum.
        /// </summary>
        [PrimaryKey, AutoIncrement]
        public int ID { get; set; }

        /// <summary>
        /// The unique Forum name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// A short title of the Forum.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// A short description of the Forum.
        /// </summary>
        public string Desc { get; set; }

        /// <summary>
        /// The type of the Forum ("o" is open, "c" is closed).
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// The category to which this Forum belongs.
        /// </summary>
        public string Cat { get; set; }

        /// <summary>
        /// The sub-category to which this Forum belongs.
        /// </summary>
        public string Sub { get; set; }

        /// <summary>
        /// Recent number of messages in the Forum.
        /// </summary>
        public int Recent { get; set; }

        /// <summary>
        /// True if changes to the Forum details are pending update.
        /// </summary>
        public bool DetailsPending { get; set; }

        /// <summary>
        /// True if a join is pending.
        /// </summary>
        public bool JoinPending { get; set; }

        /// <summary>
        /// List of participants of this Forum
        /// </summary>
        public string Parts { get; set; }

        /// <summary>
        /// List of moderators of this Forum
        /// </summary>
        public string Mods { get; set; }

        /// <summary>
        /// List of moderators being added to this Forum
        /// </summary>
        public string AddedMods { get; set; }

        /// <summary>
        /// List of participants being added to this Forum
        /// </summary>
        public string AddedParts { get; set; }

        /// <summary>
        /// List of moderators being removed from this Forum
        /// </summary>
        public string RemovedMods { get; set; }

        /// <summary>
        /// List of participants being removed from this Forum
        /// </summary>
        public string RemovedParts { get; set; }

        private int isParticipantsRefreshing;
        private int isModeratorsRefreshing;

        /// <summary>
        /// Return whether or not this Forum is closed or private
        /// </summary>
        [Ignore]
        public bool IsClosed
        {
            get { return Type != "o"; }
        }

        /// <summary>
        /// Returns whether or not the authenticated user is a moderator of
        /// this forum.
        /// </summary>
        [Ignore]
        public bool IsModerator
        {
            get { return Moderators().Contains(CIX.Username); }
        }

        /// <summary>
        /// Return true if there are some pending actions on the forum
        /// </summary>
        [Ignore]
        public bool HasPending
        {
            get { return JoinPending || DetailsPending; }
        }

        /// <summary>
        /// Join the specified forum on the server. Forum may already exist locally in which
        /// case this is a re-join action.
        /// </summary>
        public void Join()
        {
            if (!CIX.Online)
            {
                JoinPending = true;
                lock (CIX.DBLock)
                {
                    CIX.DB.Update(this);
                }
            }
            else
            {
                Thread t = new Thread(InternalJoin);
                t.Start();
            }
        }

        /// <summary>
        /// Join the specified forum.
        /// </summary>
        private void InternalJoin()
        {
            try
            {
                LogFile.WriteLine("Joining forum {0}", Name);

                HttpWebRequest wrGeturl = APIRequest.GetWithQuery("forums/" + FolderCollection.EncodeForumName(Name) + "/join", APIRequest.APIFormat.XML, "mark=true");

                string responseString = APIRequest.ReadResponseString(wrGeturl);
                if (responseString == "Success")
                {
                    LogFile.WriteLine("Successfully joined forum {0}", Name);

                    Folder folder = CIX.FolderCollection.Get(-1, Name);
                    if (folder == null)
                    {
                        folder = new Folder {Name = Name, Flags = FolderFlags.Recent, ParentID = -1};
                        CIX.FolderCollection.Add(folder);
                    }

                    folder.Flags &= ~FolderFlags.Resigned;
                    lock (CIX.DBLock)
                    {
                        CIX.DB.Update(folder);
                    }

                    CIX.DirectoryCollection.NotifyForumJoined(folder);

                    CIX.FolderCollection.Refresh(false);
                }
                JoinPending = false;
                lock (CIX.DBLock)
                {
                    CIX.DB.Update(this);
                }
            }
            catch (Exception e)
            {
                CIX.ReportServerExceptions("DirForum.Join", e);
            }
        }

        /// <summary>
        /// Return a string array of added participants
        /// </summary>
        /// <returns>String array of added participants</returns>
        [Ignore]
        public IEnumerable<string> AddedParticipants
        {
            get
            {
                return String.IsNullOrEmpty(AddedParts) ? new string[0] : AddedParts.Split(new[] {','});
            }
            set
            {
                AddedParts = value == null ? string.Empty : string.Join(",", value);
            }
        }

        /// <summary>
        /// Return a string array of removed participants
        /// </summary>
        /// <returns>String array of removed participants</returns>
        [Ignore]
        public IEnumerable<string> RemovedParticipants
        {
            get
            {
                return String.IsNullOrEmpty(RemovedParts) ? new string[0] : RemovedParts.Split(new[] {','});
            }
            set
            {
                RemovedParts = value == null ? string.Empty : string.Join(",", value);
            }
        }

        /// <summary>
        /// Retrieve the participants list
        /// </summary>
        /// <returns>A string array of participants</returns>
        public string [] Participants()
        {
            if (String.IsNullOrEmpty(Parts) && CIX.Online && Interlocked.CompareExchange(ref isParticipantsRefreshing, 1, 0) == 0)
            {
                Thread t = new Thread(() =>
                {
                    try
                    {
                        List<string> participants = new List<string>();

                        LogFile.WriteLine("Updating list of participants for {0}", Name);

                        string urlFormat = string.Format("forums/{0}/participants", FolderCollection.EncodeForumName(Name));

                        HttpWebRequest wrGeturl = APIRequest.GetWithQuery(urlFormat, APIRequest.APIFormat.XML, "maxresults=10000");
                        Stream objStream = APIRequest.ReadResponse(wrGeturl);
                        if (objStream != null)
                        {
                            using (XmlReader reader = XmlReader.Create(objStream))
                            {
                                XmlSerializer serializer = new XmlSerializer(typeof (Parts));
                                Parts allParticipants = (Parts) serializer.Deserialize(reader);

                                participants.AddRange(allParticipants.Users.Select(part => part.Name));

                                Parts = string.Join(",", participants);
                                                       
                                LogFile.WriteLine("List of participants for {0} updated", Name);

                                lock (CIX.DBLock)
                                {
                                    CIX.DB.Update(this);
                                }
                            }
                        }
                        CIX.DirectoryCollection.NotifyParticipantsUpdated(this);
                    }
                    catch (Exception e)
                    {
                        CIX.ReportServerExceptions("DirForum.Participants", e);
                    }
                    isParticipantsRefreshing = 0;
                });
                t.Start();
            }
            return String.IsNullOrEmpty(Parts) ? new string[0] : Parts.Split(new [] { ','});
        }

        /// <summary>
        /// Return a string array of added moderators
        /// </summary>
        /// <returns>String array of added moderators</returns>
        [Ignore]
        public IEnumerable<string> AddedModerators
        {
            get
            {
                return String.IsNullOrEmpty(AddedMods) ? new string[0] : AddedMods.Split(new[] {','});
            }
            set
            {
                AddedMods = value == null ? string.Empty : string.Join(",", value);
            }
        }

        /// <summary>
        /// Return a string array of removed moderators
        /// </summary>
        /// <returns>String array of removed moderators</returns>
        [Ignore]
        public IEnumerable<string> RemovedModerators
        {
            get
            {
                return String.IsNullOrEmpty(RemovedMods) ? new string[0] : RemovedMods.Split(new[] {','});
            }
            set 
            {
                RemovedMods = value == null ? string.Empty : string.Join(",", value);
            }
        }

        /// <summary>
        /// Retrieve the moderators list
        /// </summary>
        /// <returns>A string array of moderators</returns>
        public string[] Moderators()
        {
            if (String.IsNullOrEmpty(Mods) && CIX.Online && Interlocked.CompareExchange(ref isModeratorsRefreshing, 1, 0) == 0)
            {
                Thread t = new Thread(() =>
                {
                    try
                    {
                        List<string> moderators = new List<string>();

                        LogFile.WriteLine("Updating list of moderators for {0}", Name);

                        string urlFormat = string.Format("forums/{0}/moderators", FolderCollection.EncodeForumName(Name));

                        HttpWebRequest wrGeturl = APIRequest.GetWithQuery(urlFormat, APIRequest.APIFormat.XML, "maxresults=10000");
                        Stream objStream = APIRequest.ReadResponse(wrGeturl);
                        if (objStream != null)
                        {
                            using (XmlReader reader = XmlReader.Create(objStream))
                            {
                                XmlSerializer serializer = new XmlSerializer(typeof (ForumMods));
                                ForumMods allModerators = (ForumMods) serializer.Deserialize(reader);

                                moderators.AddRange(allModerators.Mods.Select(mod => mod.Name));

                                Mods = string.Join(",", moderators);

                                LogFile.WriteLine("List of moderators for {0} updated", Name);

                                lock (CIX.DBLock)
                                {
                                    CIX.DB.Update(this);
                                }
                            }
                        }
                        CIX.DirectoryCollection.NotifyModeratorsUpdated(this);
                    }
                    catch (Exception e)
                    {
                        CIX.ReportServerExceptions("DirForum.Moderators", e);
                    }
                    isModeratorsRefreshing = 0;
                });
                t.Start();
            }
            return String.IsNullOrEmpty(Mods) ? new string[0] : Mods.Split(new[] { ',' });
        }

        /// <summary>
        /// Request admittance to this forum
        /// </summary>
        public void RequestAdmittance()
        {
            if (CIX.Online)
            {
                Thread t = new Thread(() =>
                {
                    try
                    {
                        StringBuilder textTemplate = new StringBuilder(Resources.AdmissionRequestTemplate1);
                        textTemplate.Replace("$username$", CIX.Username);
                        textTemplate.Replace("$forum$", Name);

                        StringBuilder htmlTemplate = new StringBuilder(Resources.AdmissionRequestTemplate);
                        htmlTemplate.Replace("$username$", CIX.Username);
                        htmlTemplate.Replace("$forum$", Name);

                        SendMail sendMail = new SendMail
                        {
                            Text = textTemplate.ToString(),
                            HTML = htmlTemplate.ToString()
                        };

                        LogFile.WriteLine("Requesting admission to forum {0}", Name);

                        string url = string.Format("moderator/{0}/sendmessage", Name);
                        HttpWebRequest postUrl = APIRequest.Post(url, APIRequest.APIFormat.XML, sendMail);
                        string responseString = APIRequest.ReadResponseString(postUrl);

                        if (responseString == "Success")
                        {
                            LogFile.WriteLine("Successfully sent admittance request for forum {0}", Name);
                        }

                    }
                    catch (Exception e)
                    {
                        CIX.ReportServerExceptions("DirForum.RequestAdmittance", e);
                    }
                });
                t.Start();
            }
        }

        /// <summary>
        /// Called to sync this forum if any details are
        /// pending.
        /// </summary>
        internal void Sync()
        {
            if (DetailsPending)
            {
                SyncDetails();
            }
            if (JoinPending)
            {
                InternalJoin();
            }
            SyncParticipantsAndModerators();
        }

        /// <summary>
        /// Update this forum in the database and also sync with the server if
        /// we're online.
        /// </summary>
        public void Update()
        {
            lock (CIX.DBLock)
            {
                CIX.DB.Update(this);
            }
            CIX.DirectoryCollection.NotifyForumUpdated(this);
            SyncDetails();
            SyncParticipantsAndModerators();
        }

        /// <summary>
        /// Sync the additions or removal of moderators and participants
        /// </summary>
        private void SyncParticipantsAndModerators()
        {
            if (!string.IsNullOrWhiteSpace(AddedParts) || !string.IsNullOrWhiteSpace(RemovedParts))
            {
                SyncParticipants();
            }
            if (!string.IsNullOrWhiteSpace(AddedMods) || !string.IsNullOrWhiteSpace(RemovedMods))
            {
                SyncModerators();
            }
        }

        /// <summary>
        /// Sync forum details with the server.
        /// </summary>
        private void SyncDetails()
        {
            if (!CIX.Online)
            {
                DetailsPending = true;
                lock (CIX.DBLock)
                {
                    CIX.DB.Update(this);
                }
                return;
            }
            Thread t = new Thread(() =>
            {
                try
                {
                    LogFile.WriteLine("Updating forum {0} to server", Name);
                    Forum newForum = new Forum
                    {
                        Title = Title,
                        Name = Name,
                        Description = Desc,
                        Category = Cat,
                        SubCategory = Sub,
                        Type = Type
                    };

                    HttpWebRequest postUrl = APIRequest.Post("moderator/forumupdate", APIRequest.APIFormat.XML, newForum);
                    string responseString = APIRequest.ReadResponseString(postUrl);

                    if (responseString == "Success")
                    {
                        LogFile.WriteLine("Forum {0} successfully updated", Name);

                        DetailsPending = false;
                        lock (CIX.DBLock)
                        {
                            CIX.DB.Update(this);
                        }
                    }
                }
                catch (Exception e)
                {
                    CIX.ReportServerExceptions("DirForum.SyncDetails", e);
                }
            });
            t.Start();
        }

        /// <summary>
        /// Synchronise participants list changes with the server
        /// </summary>
        private void SyncParticipants()
        {
            if (CIX.Online)
            {
                Thread t = new Thread(() =>
                {
                    try
                    {
                        string encodedForumName = FolderCollection.EncodeForumName(Name);
                        foreach (string part in AddedParticipants)
                        {
                            string url = string.Format("moderator/{0}/{1}/partadd", encodedForumName, part);
                            HttpWebRequest getUrl = APIRequest.Get(url, APIRequest.APIFormat.XML);
                            string responseString = APIRequest.ReadResponseString(getUrl);

                            if (responseString == "Success")
                            {
                                LogFile.WriteLine("User {0} successfully added to {1}", part, Name);
                            }
                        }
                        foreach (string part in RemovedParticipants)
                        {
                            string url = string.Format("moderator/{0}/{1}/partrem", encodedForumName, part);
                            HttpWebRequest getUrl = APIRequest.Get(url, APIRequest.APIFormat.XML);
                            string responseString = APIRequest.ReadResponseString(getUrl);

                            if (responseString == "Success")
                            {
                                LogFile.WriteLine("User {0} successfully removed from {1}", part, Name);
                            }
                        }

                        // Clear out the current participant lists to force a refresh from the server
                        AddedParts = string.Empty;
                        RemovedParts = string.Empty;
                        Parts = string.Empty;
                        lock (CIX.DBLock)
                        {
                            CIX.DB.Update(this);
                        }

                        // Notify interested parties that the participant list has changed
                        CIX.DirectoryCollection.NotifyParticipantsUpdated(this);
                    }
                    catch (Exception e)
                    {
                        CIX.ReportServerExceptions("DirForum.SyncParticipants", e);
                    }

                });
                t.Start();
            }
        }

        /// <summary>
        /// Synchronise moderators list changes with the server
        /// </summary>
        private void SyncModerators()
        {
            if (CIX.Online)
            {
                Thread t = new Thread(() =>
                {
                    try
                    {
                        string encodedForumName = FolderCollection.EncodeForumName(Name);
                        foreach (string part in AddedModerators)
                        {
                            string url = string.Format("moderator/{0}/{1}/modadd", encodedForumName, part);
                            HttpWebRequest getUrl = APIRequest.Get(url, APIRequest.APIFormat.XML);
                            string responseString = APIRequest.ReadResponseString(getUrl);

                            if (responseString == "Success")
                            {
                                LogFile.WriteLine("Moderator {0} successfully added to {1}", part, Name);
                            }
                        }
                        foreach (string part in RemovedModerators)
                        {
                            string url = string.Format("moderator/{0}/{1}/modrem", encodedForumName, part);
                            HttpWebRequest getUrl = APIRequest.Get(url, APIRequest.APIFormat.XML);
                            string responseString = APIRequest.ReadResponseString(getUrl);

                            if (responseString == "Success")
                            {
                                LogFile.WriteLine("Moderator {0} successfully removed from {1}", part, Name);
                            }
                        }

                        // Clear out the current moderators lists to force a refresh from the server
                        AddedMods = string.Empty;
                        RemovedMods = string.Empty;
                        Mods = string.Empty;
                        lock (CIX.DBLock)
                        {
                            CIX.DB.Update(this);
                        }

                        // Notify interested parties that the moderators list has changed
                        CIX.DirectoryCollection.NotifyModeratorsUpdated(this);
                    }
                    catch (Exception e)
                    {
                        CIX.ReportServerExceptions("DirForum.SyncModerators", e);
                    }
                });
                t.Start();
            }
        }
    }
}